[{"authors":["admin"],"categories":null,"content":"I am a Senior Data scientist at the Data and Statistics Office of Bank of Canada. The views expressed on this website are mine, no responsibility for those should be attributed to the Bank of Canada.\nPrior to Bank of Canada, I worked at Apption as a Data Scientist and at IBM Canada, both as a researcher and as a software engineer. At IBM, I was part of the IBM Watson Analytics team, where I developed techniques to improve the natural language query understanding process in the Watson Analytics engine. Before IBM, I also worked for more than two years at Recognia, Inc.\nI have completed my PhD from the School of Computer Science of McGill University. My research interests include empirical software engineering, with a focus on big data. Specifically, I leverage Natural Language Processing and Machine Learning techniques on the vast amount data available in online software repositories. As part of my PhD research, I have the created Opiner, an online opinion search and summarization engine for APIs. Check out Opiner at: http://opiner.polymtl.ca\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://giasuddin.github.io/author/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/","section":"authors","summary":"I am a Senior Data scientist at the Data and Statistics Office of Bank of Canada. The views expressed on this website are mine, no responsibility for those should be attributed to the Bank of Canada.","tags":null,"title":"","type":"authors"},{"authors":["Gias Uddin","Foutse Khomh","Chanchal K. Roy"],"categories":null,"content":"","date":1583020800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1583020800,"objectID":"bbab0bed9a178f3736bb171d34b16ba3","permalink":"https://giasuddin.github.io/publication/opiner-usagemining-ist2020/","publishdate":"2020-03-01T00:00:00Z","relpermalink":"/publication/opiner-usagemining-ist2020/","section":"publication","summary":"We propose a framework to mine API usage scenarios from Stack Overflow. Each task consists of a code example, the task description, and the reactions of developers towards the code example. First, we present an algorithm to automatically link a code example in a forum post to an API mentioned in the textual contents of the forum post. Second, we generate a natural language description of the task by summarizing the discussions around the code example. Third, we automatically associate developers reactions (i.e., positive and negative opinions) towards the code example to offer information about code quality.","tags":["IST","API","Opiner","Usage","Documentation"],"title":"Mining API usage scenarios from stack overflow","type":"publication"},{"authors":["Ikram El Asri","Noureddine Kerzazi","**Gias Uddin**","Foutse Khomh","M. A. Janati Idrissi"],"categories":null,"content":"","date":1559606400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559606400,"objectID":"02332ecac2f9fd332b85a7f9ac9a640a","permalink":"https://giasuddin.github.io/publication/code-review-sentiment-empirical-study/","publishdate":"2019-06-04T00:00:00Z","relpermalink":"/publication/code-review-sentiment-empirical-study/","section":"publication","summary":"We study empirically the impact of sentiment embodied within developersâ€™ comments on the time and outcome of the code review process. We found that (1) contributors frequently express positive and negative sentiments during code review activities; (2) the expressed sentiments differ among the contributors depending on their position within the social network of the reviewers ( e.g., core vs peripheral contributors); (3) the sentiments expressed by contributors tend to be neutral as they progress from the status of newcomer in an OSS project to the status of core team contributors; (4) the reviews with negative comments on average took more time to complete than the reviews with positive/neutral comments, and (5) the reviews with controversial comments took significantly longer time in one project.","tags":["IST","Sentiment","Code-Review"],"title":"An Empirical Study of Sentiments in Code Reviews","type":"publication"},{"authors":null,"categories":null,"content":"","date":1559606400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559606400,"objectID":"00f28cbaba3b2eb1ee3260fbe7fb5481","permalink":"https://giasuddin.github.io/post/10june2020/","publishdate":"2019-06-04T00:00:00Z","relpermalink":"/post/10june2020/","section":"post","summary":"http://www.google.ca","tags":["IST","Sentiment","Code-Review"],"title":"We are on BBC News","type":"post"},{"authors":["**Gias Uddin**","Olga Baysal"," Latifa Guerrouj","Foutse Khomh"],"categories":null,"content":"","date":1550966400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1550966400,"objectID":"cc8839aa527ecff3a588a825a4870f44","permalink":"https://giasuddin.github.io/publication/opinion-survey-tse2019/","publishdate":"2019-02-24T00:00:00Z","relpermalink":"/publication/opinion-survey-tse2019/","section":"publication","summary":"To understand how developers seek and evaluate API opinions, we conducted two surveys involving a total of 178 software developers. We analyzed the data in two dimensions, each corresponding to specific needs related to API reviews: (1) Needs for seeking API reviews, and (2) Needs for automated tool support to assess the reviews. We observed that developers seek API reviews and often have to summarize those for diverse development needs (e.g., API suitability).","tags":["TSE","Big Data","API"],"title":"Understanding How and Why Developers Seek and Analyze API-related Opinions","type":"publication"},{"authors":["**Gias Uddin**","Foutse Khomh"],"categories":null,"content":"","date":1549929600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549929600,"objectID":"f240171ed9f56f4480a1edafafb19f07","permalink":"https://giasuddin.github.io/publication/opiner-review-mine-tse2019/","publishdate":"2019-02-12T00:00:00Z","relpermalink":"/publication/opiner-review-mine-tse2019/","section":"publication","summary":"We conducted a case study of opinions in Stack Overflow using a benchmark dataset of 4522 sentences. We observed that opinions about diverse API aspects (e.g., usability) are prevalent and offer insights that can shape developers perception and decisions related to software development. Motivated by the finding, we built a suite of techniques to automatically mine and categorize opinions about APIs from forum posts.","tags":["TSE","Big Data","API"],"title":"Automatic Mining of Opinions Expressed About APIs in Stack Overflow","type":"publication"},{"authors":["**Gias Uddin**","Foutse Khomh","Chanchal K Roy"],"categories":null,"content":"","date":1549238400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549238400,"objectID":"f508daece19f8464e9f55a69cae44627","permalink":"https://giasuddin.github.io/publication/opiner-usage-summary-poster-icse2019/","publishdate":"2019-02-04T00:00:00Z","relpermalink":"/publication/opiner-usage-summary-poster-icse2019/","section":"publication","summary":"We  present  a  framework  to  automatically  mine  usage  scenarios about  APIs  from  online  developer  forums.  Each  usage  scenario of  an  API  consists  of  a  code  example,  a  summary  description,and  the  reactions  (i.e.,  positive  and  negative  opinions)  of  other developers  towards  the  code  example.","tags":["ICSE","Big Data","API"],"title":"Towards Crowd-Sourced API Documentation","type":"publication"},{"authors":["**Gias Uddin**","Foutse Khomh"],"categories":null,"content":"","date":1509321600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1509321600,"objectID":"202c6b73c6c0c57ba68878a51ea0a303","permalink":"https://giasuddin.github.io/publication/opiner-review-summaries-algo-ase2017/","publishdate":"2017-10-30T00:00:00Z","relpermalink":"/publication/opiner-review-summaries-algo-ase2017/","section":"publication","summary":"We present two algorithms (statistical and aspect-based) to summarize opinions about APIs. To investigate the usefulness of the techniques, we developed, Opiner, an online opinion summarization engine that presents summaries of opinions using both our proposed techniques and existing six off the shelf techniques. We investigated the usefulness of Opiner using two case studies, both involving professional software engineers. We found that developers were interested to use our proposed summaries much more frequently than other summaries (daily vs once a year) and that while combined with Stack Overflow, Opiner helped developers to make the right decision with more accuracy and confidence and in less time.","tags":["ASE","Big Data","API"],"title":"Automatic Summarization of API Reviews","type":"publication"},{"authors":["**Gias Uddin**","Foutse Khomh"],"categories":null,"content":"","date":1509321600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1509321600,"objectID":"e180004a30f864361f6be5fba6657b76","permalink":"https://giasuddin.github.io/publication/opiner-review-summaries-tooldemo-ase2017/","publishdate":"2017-10-30T00:00:00Z","relpermalink":"/publication/opiner-review-summaries-tooldemo-ase2017/","section":"publication","summary":"We introduce Opiner, our opinion search and summarization engine for API reviews. The server side of Opiner collects and summarizes opinions about APIs by crawling online developer forums and by associating the opinions found in the forum posts to the APIs discussed in the posts. The client side of Opiner is a Website that presents different summarized viewpoints of the opinions about the APIs in an online search engine.","tags":["ASE","Big Data","API"],"title":"Opiner: an opinion search and summarization engine for APIs","type":"publication"},{"authors":["**Gias Uddin**","Martin P. Robillard"],"categories":null,"content":"","date":1448841600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1448841600,"objectID":"26dfd64a3a305f9cef1b8e807d304e58","permalink":"https://giasuddin.github.io/publication/how-api-doc-fails-ieeesw2015/","publishdate":"2015-11-30T00:00:00Z","relpermalink":"/publication/how-api-doc-fails-ieeesw2015/","section":"publication","summary":"Formal documentation can be a crucial resource for learning to how to use an API. However, producing high-quality documentation can be nontrivial. Researchers investigated how 10 common documentation problems manifested themselves in practice. The results are based on two surveys of a total of 323 professional software developers and analysis of 179 API documentation units. The three severest problems were ambiguity, incompleteness, and incorrectness of content. The respondents often mentioned six of the 10 problems as blockers that forced them to use another API.","tags":["IEEE Software","API","Documentation"],"title":"How API Documentation Fails","type":"publication"},{"authors":["**Gias Uddin**","BarthÃ©lÃ©my Dagenais","Martin P. Robillard"],"categories":null,"content":"","date":1351555200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1351555200,"objectID":"76f07ee61688662c3cc40c6707d7200f","permalink":"https://giasuddin.github.io/publication/temporal-api-concepts-icse2012/","publishdate":"2012-10-30T00:00:00Z","relpermalink":"/publication/temporal-api-concepts-icse2012/","section":"publication","summary":"Software reuse through Application Programming Interfaces (APIs) is an integral part of software development. The functionality offered by an API is not always accessed uniformly throughout the lifetime of a client program. We propose Temporal API Usage Pattern Mining to detect API usage patterns in terms of their time of introduction into client programs. We detect concepts as distinct groups of API functionality from the change history of a client program. We locate those concepts in the client change history and detect temporal usage patterns, where a pattern contains a set of concepts that were added into the client program in a specific temporal order. We investigated the properties of temporal API usage patterns through a multiple-case study of three APIs and their use in up to 19 client software projects. Our technique was able to detect a number of valuable patterns in two out of three of the APIs investigated. Further investigation showed some patterns to be relatively consistent between clients, produced by multiple developers, and not trivially derivable from program structure or API documentation.","tags":["ICSE","API","Documentation"],"title":"Temporal Analysis of API Usage Concepts","type":"publication"},{"authors":["**Gias Uddin**","BarthÃ©lÃ©my Dagenais","Martin P. Robillard"],"categories":null,"content":"","date":1319932800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1319932800,"objectID":"052dc7c03509fbd425cea6c407bddd54","permalink":"https://giasuddin.github.io/publication/temporal-api-usage-pattern-ase2011/","publishdate":"2011-10-30T00:00:00Z","relpermalink":"/publication/temporal-api-usage-pattern-ase2011/","section":"publication","summary":"Software reuse through Application Programming Interfaces (APIs) is an integral part of software development. As developers write client programs, their understanding and usage of APIs change over time. Can we learn from long-term changes in how developers work with APIs in the lifetime of a client program? We propose Temporal API Usage Mining to detect significant changes in API usage. We describe a framework to extract detailed models representing addition and removal of calls to API methods over the change history of a client program. We apply machine learning technique to these models to semi-automatically infer temporal API usage patterns, i.e., coherent addition of API calls at different phases in the life-cycle of the client program.","tags":["ASE","API","Documentation"],"title":"Analyzing Temporal API Usage Patterns","type":"publication"},{"authors":["**Gias Uddin**","Mohammad Zulkernine"],"categories":null,"content":"","date":1256860800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1256860800,"objectID":"9aae2baef6b9197fd2f64a5be4ae0502","permalink":"https://giasuddin.github.io/publication/trust-monitoring-architecture-bookchapter-hasc2009/","publishdate":"2009-10-30T00:00:00Z","relpermalink":"/publication/trust-monitoring-architecture-bookchapter-hasc2009/","section":"publication","summary":"Service-based software can be misused by potentially untrustworthy service requestors while providing services. A service-based system is usually dynamic due to mutual collaboration among stakeholders to achieve goals, perform tasks and manage resources. However, it lacks the presence of a central authority to monitor the trustworthiness of service users. In this chapter, we propose a trust monitoring architecture, called TrAM (Trust Architecture for Monitoring) to monitor the trustworthiness of service users at run-time, facilitating the analysis of interactions from trust perspectives. Monitoring allows the enforcement of corrective actions that may protect the software by mitigating major unwanted incidents. The performance of the architecture has been evaluated by monitoring a prototype file-sharing grid.","tags":["HASC","Software Security"],"title":"A Trust Monitoring Architecture for Service-Based Software","type":"publication"},{"authors":["**Gias Uddin**","Mohammad Zulkernine","Sheikh Iqbal Ahamed"],"categories":null,"content":"","date":1256860800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1256860800,"objectID":"8e60890ff00762a3d3c896f3a216080c","permalink":"https://giasuddin.github.io/publication/collaboration-trust-model-soca2009/","publishdate":"2009-10-30T00:00:00Z","relpermalink":"/publication/collaboration-trust-model-soca2009/","section":"publication","summary":"The open and dynamic nature of service-based software systems necessitates spontaneous and trustworthy interactions between collaborating entities. Service providers are exposed to users spanned across multiple organizational domains, so can be exploited by potentially untrustworthy service requestors. Given that, service providers need to trust requestors before granting them with services. Trust encompasses a number of quality attributes (e.g., security, competence, honesty) and helps in dynamic decision making. In this paper, we present a trust-based service collaboration approach, facilitated by the analysis of service-based interactions between service providers and requestors, and recommendations between service providers. Service providers exchange recommendations to convey their trust on requestors. This collaboration is quantified using our proposed trust model, called CAT, a Context-Aware Trust model based on service-based interactions by considering services as contexts. We identify a number of collaboration-based trust properties including risk and context-awareness and incorporate them in CAT. A context-similarity parameter is introduced to decide on similar services. A time-based ageing parameter is proposed to decrease trust values over time without any further interactions. Direct and indirect recommendations from other service providers are included in total trust calculation, with a path-based ageing parameter applying over indirect recommendations. A mechanism to calculate the accuracy of recommendations is proposed to differentiate between reliable and unreliable recommendations. These calculation schemes are employed in a trust-based service collaboration algorithm to automatically decide on granting services to requestors. The approach is elaborated using examples from file sharing applications, and successfully evaluated by implementing a prototype service-based file sharing grid.","tags":["SOCA","Software Security"],"title":"Collaboration through computation: incorporating trust model into service-based software systems","type":"publication"},{"authors":["Chanchal Kumar Roy","**Gias Uddin**","Banani Roy","Thomas R. Dean"],"categories":null,"content":"","date":1183939200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1183939200,"objectID":"ae510ffebcf676aa6d5101aacffcfc3d","permalink":"https://giasuddin.github.io/publication/evaluate-aspect-mining-techniques-icpc2007/","publishdate":"2007-07-09T00:00:00Z","relpermalink":"/publication/evaluate-aspect-mining-techniques-icpc2007/","section":"publication","summary":"Aspect mining aims at identifying cross-cutting concerns in existing systems and therefore advocates the adaption to an aspect-oriented design. This paper presents a case study examining three existing aspect mining techniques from the literature by applying them to four different open source Java applications. We compare and evaluate the individual technique and confirm the findings of a previous study of combining different aspect mining techniques in order to get better results with less manual intervention.","tags":["ICPC","Mining Software Repositories"],"title":"Evaluating Aspect Mining Techniques: A Case Study","type":"publication"}]